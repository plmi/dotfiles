#!/bin/bash

py2server() {
  # use 8000 if no argument supplied
  port="${1:-8000}"	
  python -m SimpleHTTPServer "$port"
}

pyserver() {
  port="${1:-8000}"	
  python -m http.server "$port"
}

phpserver() {
  port="${1:-8000}"
  # ensures to not bind to ipv6 loopback address
  php -S 0.0.0.0:"$port"
}

pdfmerge() {
  # usage: pdfmerge <file1, file2, ..> <output>
  gs -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -o "merged_$#.pdf" "$@"
}

pdfextract() {
    # usage: pdfextract <from> <to> <file>
    # output file: "inputfile_pXX-pYY.pdf"
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=${1} \
       -dLastPage=${2} \
       -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
       ${3}
}

flac2mp3() {
  # convert all *.flac files in current directory to .mp3
  find -type f -name "*.flac" \
    -exec bash -c 'ffmpeg -i "{}" -y -acodec libmp3lame -ab 192k "${0/.flac}.mp3"' {} \;
}

noword() {
  pandoc -o output.pdf -f docx "$1"
}

mkdirs() {
  mkdir {exploit,loot,report,scans}
}

open() {
  if [ "${1##*.}" = "pdf" ] && command -v tabbedzathura > /dev/null; then
    tabbedzathura "$1"
  else
    xdg-open "$1" &!
  fi
}

jupyterlab() {
  # &: run process in background, !: disown equivalent in zsh
  jupyter-lab --no-browser --LabApp.token='' --ip=127.0.0.1 --port 8888 --notebook-dir="$1" > /dev/null 2>&1 &!
}

function rmv {
  rsync -ah --info=progress2 --append-verify --remove-source-files --stats $1 $2 && \
    find $1 -type d -empty -print -delete
}

function bindiff {
  colordiff -y <(xxd "$1") <(xxd "$2")
}

function tree {
  DEPTH_LEVEL=$(
    find . -type d -not -path '*/.git'\
      -exec bash -c 'echo $(tr -cd / <<< "$1"|wc -c):$1' -- {} \; | \
      sort -n | tail -n 1 | awk -F: '{print $1+1}'
  )
  exa --git-ignore --tree --all --ignore-glob ".git" \
	  --level="${DEPTH_LEVEL}" .
}

function help() {
  # colored --help
  # usage: help nmap
  "$@" --help 2>&1 | bathelp
}

function man() (
  # man without arguments will use fzf to select a page
  MAN="/usr/bin/man"
  if [ -n "$1" ]; then
    $MAN "$@"
    return $?
  else
    $MAN -k . | fzf --reverse --prompt='Man> ' --preview="echo {1} | sed 's/(.*//' | xargs $MAN -P cat" | awk '{print $1}' | sed 's/(.*//' | xargs $MAN
    return $?
  fi
)

function fenv() {
  # fuzzy find environment variables
  local var
  var=$(printenv | cut -d= -f1 | fzf --preview="printenv {1}") && echo "$var=${(P)var}"
}

function commands() {
  # fuzzy find aliases and functions
  CMD=$(
    (
      (alias)
      (functions | grep "()" | cut -d ' ' -f1 | grep -v "^_")
    ) | fzf | cut -d '=' -f1
  )

  eval $CMD
}

function pass() {
  local PREFIX
  PREFIX="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
  PASS="/usr/bin/pass"
  if [ "$1" = "ff" ] && [ "$#" -eq 1 ]; then
    pass -c $(rg --files "$PREFIX" | sed "s#$PREFIX/##" | sed "s#.gpg\$##" | sort | fzf)
    return $?
  else
    $PASS "$@"
    return $?
  fi
}

function what() {
  # fuzzy find installed packages
  pacman -Q | sort | fzf
}

# TODO: use this instead of current pass()?
#_fzf_complete_pass() {
#  _fzf_complete +m -- "$@" < <(
#    local prefix
#    prefix="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
#    command find -L "$prefix" \
#      -name "*.gpg" -type f | \
#      sed -e "s#${prefix}/\{0,1\}##" -e 's#\.gpg##' -e 's#\\#\\\\#' | sort
#  )
#}
